{"meta":{"title":"看风景的游客甲","subtitle":null,"description":"我自己觉得很赞","author":"看风景的游客甲","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2021-04-07T08:31:07.000Z","updated":"2021-04-08T01:15:02.229Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"推荐网站:https://cloud12156.github.io"},{"title":"分类","date":"2021-04-02T05:57:41.000Z","updated":"2021-04-02T06:00:29.809Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"朋友圈","date":"2021-02-11T10:09:00.000Z","updated":"2021-02-13T14:47:33.171Z","comments":true,"path":"fcircle/index.html","permalink":"http://example.com/fcircle/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-04-02T05:56:52.000Z","updated":"2021-04-02T06:00:50.917Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"友人帐","date":"2020-08-14T00:50:42.000Z","updated":"2021-04-26T00:30:38.103Z","comments":true,"path":"link/index.html","permalink":"http://example.com/link/index.html","excerpt":"","text":""}],"posts":[{"title":"Spring笔记","slug":"Spring","date":"2021-04-01T08:39:30.789Z","updated":"2021-04-26T03:21:13.173Z","comments":true,"path":"2021/04/01/Spring/","link":"","permalink":"http://example.com/2021/04/01/Spring/","excerpt":"","text":"Spring简介Spring : 春天 —&gt;给软件行业带来了春天Spring理念 : 使现有技术更加实用 . 本身就是一个大杂烩 , 整合现有的框架技术官网 : http://spring.io/官方下载地址 : https://repo.spring.io/libs-release-local/org/springframework/spring/GitHub : https://github.com/spring-projects 优点1、Spring是一个开源免费的框架 , 容器 .2、Spring是一个轻量级的框架 , 非侵入式的 .3、控制反转 IoC , 面向切面 Aop4、对事物的支持 , 对框架的支持 maven导入配置在idea maven项目下,使用以下代码,放置pom.xml中进行配置 123456&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;5.2.0.RELEASE&lt;/version&gt;&lt;/dependency&gt; 目录Spring项目目录如下 spring配置xml配置​ beans.xml文件内容 12345678910111213&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt; &lt;!--bean就是java对象 , 由Spring创建和管理--&gt; &lt;bean id=&quot;hello&quot; class=&quot;com.yun.pojo.Hello&quot;&gt; &lt;property name=&quot;name&quot; value=&quot;Spring&quot;/&gt; &lt;property name=&quot;id&quot; value=&quot;12156&quot;&gt;&lt;/property&gt; &lt;/bean&gt;&lt;/beans&gt; test.Java 123456789101112131415161718192021import com.yun.pojo.Hello;import org.junit.Test;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;/** * @Author kinlanven * @Date 2021/3/23 16:34 * @Version 1.0 */public class myTest &#123; @Test public void test()&#123; //解析beans.xml文件 , 生成管理相应的Bean对象 ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;); //getBean : 参数即为spring配置文件中bean的id . Hello hello = (Hello) context.getBean(&quot;hello&quot;); hello.show(); &#125;&#125; IOC创建方式无参构造方式: IOC默认使用无参构造方法创建对象 123&lt;bean id=&quot;user&quot; class=&quot;com.yun.pojo.User&quot;&gt; &lt;property name=&quot;name&quot; value=&quot;&quot;&gt;&lt;/property&gt;&lt;/bean&gt; 有参构造方式: IOC三种有参构造方法创建对象的方式- 123456789101112131415161718192021222324252627第一种：下标赋值 &lt;bean id=&quot;user&quot; class=&quot;com.yun.pojo.User&quot;&gt; &lt;property name=&quot;name&quot; value=&quot;yun12156&quot;/&gt; &lt;constructor-arg index=&quot;0&quot; value=&quot;看风景的游客甲在看风景&quot;&gt;&lt;/constructor-arg&gt; &lt;/bean&gt;第二种：通过类型创建 不建议使用--&gt; &lt;bean id=&quot;user&quot; class=&quot;com.yun.pojo.User&quot;&gt; &lt;constructor-arg type=&quot;java.lang.String&quot; value=&quot;看风景的游客乙在看风景&quot;&gt;&lt;/constructor-arg&gt; &lt;/bean&gt;--&gt;第三种：直接通过参数名来设置--&gt; &lt;bean id=&quot;user&quot; class=&quot;com.yun.pojo.User&quot;&gt; &lt;constructor-arg name=&quot;name&quot; value=&quot;看风景的游客丙在看风景&quot;&gt;&lt;/constructor-arg&gt; &lt;/bean&gt;&lt;!-- id:bean唯一标识，相当于对象名--&gt;&lt;!-- class：bean全限定名：包＋类型--&gt;&lt;!-- name:别名：可以同时去多个别名--&gt; &lt;bean id=&quot;userT&quot; class=&quot;com.yun.pojo.UserT&quot; name=&quot;u2&quot;&gt; &lt;property name=&quot;name&quot; value=&quot;看风景的游客丁&quot;&gt;&lt;/property&gt; &lt;property name=&quot;id&quot; value=&quot;12156&quot;&gt;&lt;/property&gt; &lt;/bean&gt;&lt;!-- 取别名：一对一--&gt;&lt;alias name=&quot;&quot; alias=&quot;&quot;&gt;&lt;/alias&gt;&lt;/beans&gt; 依赖注入 概念 依赖注入（Dependency Injection,DI）。 依赖 : 指Bean对象的创建依赖于容器 . Bean对象的依赖资源 . 注入 : 指Bean对象所依赖的资源 , 由容器来设置和装配 . 构造器注入之前 set注入​ 要求被注入的属性 , 必须有set方法 , set方法的方法名由set + 属性首字母大写 , 如果属性是boolean类型 , 没有set方法 , 是 is . 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot; xmlns:c=&quot;http://www.springframework.org/schema/c&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt; &lt;bean id=&quot;addres&quot; class=&quot;com.yun.pojo.Address&quot;&gt; &lt;property name=&quot;address&quot; value=&quot;长沙&quot;&gt;&lt;/property&gt; &lt;/bean&gt; &lt;bean id=&quot;student&quot; class=&quot;com.yun.pojo.Student&quot;&gt; &lt;property name=&quot;name&quot; value=&quot;看风景的游客甲&quot;&gt;&lt;/property&gt; &lt;property name=&quot;address&quot; ref=&quot;addres&quot;&gt;&lt;/property&gt;&lt;!-- 数组注入--&gt; &lt;property name=&quot;books&quot;&gt; &lt;array&gt; &lt;value&gt;西游记&lt;/value&gt; &lt;value&gt;红楼梦&lt;/value&gt; &lt;value&gt;水浒传&lt;/value&gt; &lt;/array&gt; &lt;/property&gt;&lt;!-- List注入--&gt; &lt;property name=&quot;hobbys&quot;&gt; &lt;list&gt; &lt;value&gt;听歌&lt;/value&gt; &lt;value&gt;看电影&lt;/value&gt; &lt;value&gt;爬山&lt;/value&gt; &lt;/list&gt; &lt;/property&gt;&lt;!-- MAP注入--&gt; &lt;property name=&quot;card&quot;&gt; &lt;map&gt; &lt;entry key=&quot;中国邮政&quot; value=&quot;456456456465456&quot;/&gt; &lt;entry key=&quot;建设&quot; value=&quot;1456682255511&quot;/&gt; &lt;/map&gt; &lt;/property&gt;&lt;!--set注入--&gt; &lt;property name=&quot;games&quot;&gt; &lt;set&gt; &lt;value&gt;LOL&lt;/value&gt; &lt;value&gt;BOB&lt;/value&gt; &lt;value&gt;COC&lt;/value&gt; &lt;/set&gt; &lt;/property&gt;&lt;!--null值注入--&gt; &lt;property name=&quot;wife&quot;&gt;&lt;null/&gt;&lt;/property&gt;&lt;!-- property注入--&gt; &lt;property name=&quot;info&quot;&gt; &lt;props&gt; &lt;prop key=&quot;学号&quot;&gt;20190604&lt;/prop&gt; &lt;prop key=&quot;性别&quot;&gt;男&lt;/prop&gt; &lt;prop key=&quot;姓名&quot;&gt;小明&lt;/prop&gt; &lt;/props&gt; &lt;/property&gt; &lt;/bean&gt; &lt;bean id=&quot;user&quot; class=&quot;com.yun.pojo.User&quot; p:name=&quot;yun&quot; p:age=&quot;12156&quot;&gt;&lt;/bean&gt;&lt;/beans&gt; 扩展方式注入1、P命名空间注入 : 需要在头文件中加入约束文件 1234导入约束 : xmlns:p=&quot;http://www.springframework.org/schema/p&quot;&lt;!--P(属性: properties)命名空间 , 属性依然要设置set方法--&gt;&lt;bean id=&quot;user&quot; class=&quot;com.kuang.pojo.User&quot; p:name=&quot;狂神&quot; p:age=&quot;18&quot;/&gt; 2、c 命名空间注入 : 需要在头文件中加入约束文件 123导入约束 : xmlns:c=&quot;http://www.springframework.org/schema/c&quot;&lt;!--C(构造: Constructor)命名空间 , 属性依然要设置set方法--&gt;&lt;bean id=&quot;user&quot; class=&quot;com.kuang.pojo.User&quot; c:name=&quot;狂神&quot; c:age=&quot;18&quot;/&gt; Bean的作用域 单例模式默认机制 123&lt;bean id=&quot;accountService&quot; class=&quot;com.something.DefaultAccountService&quot;/&gt;&lt;!-- the following is equivalent, though redundant (singleton scope is the default) --&gt;&lt;bean id=&quot;accountService&quot; class=&quot;com.something.DefaultAccountService&quot; scope=&quot;singleton&quot;/&gt; @Test public void test03(){ ApplicationContext context = new ClassPathXmlApplicationContext(“applicationContext.xml”); User user = (User) context.getBean(“user”); User user2 = (User) context.getBean(“user”); System.out.println(user==user2); } 代理模式每次从容器中get的时候都会新建一个新对象 1&lt;bean id=&quot;accountService&quot; class=&quot;com.something.DefaultAccountService&quot; scope=&quot;prototype&quot;/&gt; Request当一个bean的作用域为Request，表示在一次HTTP请求中，一个bean定义对应一个实例；即每个HTTP请求都会有各自的bean实例，它们依据某个bean定义创建而成。该作用域仅在基于web的Spring ApplicationContext情形下有效。考虑下面bean定义： 1&lt;bean id=&quot;loginAction&quot; class=cn.csdn.LoginAction&quot; scope=&quot;request&quot;/&gt; 针对每次HTTP请求，Spring容器会根据loginAction bean的定义创建一个全新的LoginAction bean实例，且该loginAction bean实例仅在当前HTTP request内有效，因此可以根据需要放心的更改所建实例的内部状态，而其他请求中根据loginAction bean定义创建的实例，将不会看到这些特定于某个请求的状态变化。当处理请求结束，request作用域的bean实例将被销毁。 Session当一个bean的作用域为Session，表示在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。考虑下面bean定义： 1&lt;bean id=&quot;userPreferences&quot; class=&quot;com.foo.UserPreferences&quot; scope=&quot;session&quot;/&gt; 针对某个HTTP Session，Spring容器会根据userPreferences bean定义创建一个全新的userPreferences bean实例，且该userPreferences bean仅在当前HTTP Session内有效。与request作用域一样，可以根据需要放心的更改所创建实例的内部状态，而别的HTTP Session中根据userPreferences创建的实例，将不会看到这些特定于某个HTTP Session的状态变化。当HTTP Session最终被废弃的时候，在该HTTP Session作用域内的bean也会被废弃掉。 Bean的自动装配ByName自动装配12345678&lt;bean id=&quot;dog&quot; class=&quot;com.yun.pojo.Dog&quot;/&gt;&lt;bean id=&quot;cat&quot; class=&quot;com.yun.pojo.Cat&quot;/&gt;&lt;!--byname会在容器中寻找set方法后对应的名称 例:setCat bayname回去寻找cat--&gt;&lt;bean id=&quot;user&quot; class=&quot;com.yun.pojo.User&quot; autowire=&quot;byName&quot;&gt; &lt;property name=&quot;name&quot; value=&quot;看风景的游客甲&quot;&gt;&lt;/property&gt;&lt;/bean&gt; ByType自动装配123456 &lt;bean id=&quot;dog&quot; class=&quot;com.yun.pojo.Dog&quot;/&gt; &lt;bean id=&quot;cat111&quot; class=&quot;com.yun.pojo.Cat&quot;/&gt;&lt;!--byname会在容器中寻找相同的属性 例:cat111的属性为Cat--&gt; &lt;bean id=&quot;user&quot; class=&quot;com.yun.pojo.User&quot; autowire=&quot;byType&quot;&gt; &lt;property name=&quot;name&quot; value=&quot;看风景的游客甲&quot;&gt;&lt;/property&gt; &lt;/bean&gt; 小结:​ ByName:将查找其类中所有的set方法名，例如setCat，获得将set去掉并且首字母小写的字符串，即cat。 ​ ByType:同一类型的对象，在spring容器中唯一;如果有两个bean会报错 使用注解实现自动装配依赖ApplicationContext.xml配置 1234567891011121314&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;&gt; &lt;!--开启注解--&gt; &lt;context:annotation-config/&gt; &lt;!--指定注解扫描包--&gt; &lt;context:component-scan base-package=&quot;com.yun.pojo&quot;/&gt;&lt;/beans&gt; @Autowired可以直接在类上面使用 12345678public class User &#123;// required = false可以值为空 @Autowired(required = false) private Cat cat; @Autowired private Dog dog; private String name; @Nullable表示该字段可以为空 123public User(@Nullable String name) &#123; this.name = name;&#125; @Qualifier可以通过vlaue值找到对应的id 1&lt;bean id=&quot;dog123&quot; class=&quot;com.yun.pojo.Dog&quot;/&gt; 123@Autowired@Qualifier(value =&quot;dog123&quot;)private Dog dog; @Resource1234@Resourceprivate Cat cat;@Resource(name = &quot;dog123&quot;)private Dog dog;@Autowired 小结:@Autowired:采用bytype的方式实现 @Resource:采用byname的方式实现,如果找不到就采用bytype的方式实现 使用注解开发@Component等于 @Value等于 衍生注解 @Controller：controller层 @Service：service层 @Repository：dao层 功能与@Component都一样,只是名字区分,都将装配到bean里面 使用Java的方式配置spring完全使用Java不去使用bean.xml来配置 配置com.yun.config层 12345678910111213141516171819package com.yun.config;import com.yun.pojo.User;import org.springframework.context.annotation.ComponentScan;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.Import;//@Configuration相当于一个beans.xml@Configuration//导包@ComponentScan(&quot;com.yun.pojo&quot;)@Import(YunConfig2.class)public class YunConfig &#123; user相当于bean的id public User user()&#123; return new User(); &#125;&#125; 实体com.yun.pojo层 1234567891011121314151617package com.yun.pojo;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Component;@Componentpublic class User &#123; public String name; public String getName() &#123; return name; &#125;@Value(&quot;看风景的游客&quot;) public void setName(String name) &#123; this.name = name; &#125;&#125; 测试1234567891011121314151617import com.yun.config.YunConfig;import com.yun.pojo.User;import org.springframework.context.ApplicationContext;import org.springframework.context.annotation.AnnotationConfigApplicationContext;/** * @Author kinlanven * @Date 2021/3/28 11:34 * @Version 1.0 */public class Test &#123; public static void main(String[] args) &#123; ApplicationContext context = new AnnotationConfigApplicationContext(YunConfig.class); User user = (User) context.getBean(&quot;user&quot;); System.out.println(user.getName()); &#125;&#125; 代理模式静态代理1234567891011121314151617public class UserServiceImpl implements UserService &#123; public void add() &#123; System.out.println(&quot;增加了一个用户&quot;); &#125; public void delete() &#123; System.out.println(&quot;删除了一个用户&quot;); &#125; public void update() &#123; System.out.println(&quot;更新了一个用户&quot;); &#125; public void query() &#123; System.out.println(&quot;查询了一个用户&quot;); &#125;&#125; 12345678910111213141516171819202122232425262728293031public class UserServiceProxy &#123; private UserService userService; public void setUserService(UserService userService) &#123; this.userService = userService; &#125; public void add() &#123; log(&quot;add&quot;); userService.add(); &#125; public void delete() &#123; log(&quot;delete&quot;); userService.delete(); &#125; public void update() &#123; log(&quot;update&quot;); userService.update(); &#125; public void query() &#123; log(&quot;query&quot;); userService.query(); &#125; public void log(String msg)&#123; System.out.println(&quot;执行了&quot;+msg+&quot;方法&quot;); &#125;&#125; 抽象角色 : 一般使用接口或者抽象类来实现 真实角色 : 被代理的角色 代理角色 : 代理真实角色 ; 代理真实角色后 , 一般会做一些附属的操作 . 客户 : 使用代理角色来进行一些操作 . 动态代理ProxyInvocationHandler. java 即代理角色123456789101112131415161718192021222324252627282930import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.lang.reflect.Proxy;public class ProxyInvocationHandler implements InvocationHandler &#123; private Object target; public void setTarget(Object target) &#123; this.target = target; &#125; //生成代理类 public Object getProxy()&#123; return Proxy.newProxyInstance(this.getClass().getClassLoader(), target.getClass().getInterfaces(),this); &#125; // proxy : 代理类 // method : 代理类的调用处理程序的方法对象. public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; log(method.getName()); Object result = method.invoke(target, args); return result; &#125; public void log(String methodName)&#123; System.out.println(&quot;执行了&quot;+methodName+&quot;方法&quot;); &#125;&#125; Client . java1234567891011121314import com.yun.demo02.UserService;import com.yun.demo02.UserServiceImpl;public class Clitent &#123; public static void main(String[] args) &#123; //真实对象 UserServiceImpl userService = new UserServiceImpl(); //代理对象的调用处理程序 ProxyInvocationHandler pih = new ProxyInvocationHandler(); pih.setTarget(userService); //设置要代理的对象 UserService proxy = (UserService)pih.getProxy(); //动态生成代理类！ proxy.delete(); &#125;&#125; AOP依赖包123456&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;&lt;dependency&gt; &lt;groupId&gt;org.aspectj&lt;/groupId&gt; &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt; &lt;version&gt;1.9.4&lt;/version&gt;&lt;/dependency&gt; 横切关注点：跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要关注的部分，就是横切关注点。如日志 , 安全 , 缓存 , 事务等等 …. 切面（ASPECT）：横切关注点 被模块化 的特殊对象。即，它是一个类。 通知（Advice）：切面必须要完成的工作。即，它是类中的一个方法。 目标（Target）：被通知对象。 代理（Proxy）：向目标对象应用通知之后创建的对象。 切入点（PointCut）：切面通知 执行的 “地点”的定义。 连接点（JointPoint）：与切入点匹配的执行点。 使用spring 实现aop方式一使用spring api接口 123456789101112131415161718192021222324&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt; &lt;!--注册bean--&gt; &lt;bean id=&quot;userService&quot; class=&quot;com.yun.service.UserServiceImpl&quot;/&gt; &lt;bean id=&quot;log&quot; class=&quot;com.yun.log.Log&quot;/&gt; &lt;bean id=&quot;afterLog&quot; class=&quot;com.yun.log.AfterLog&quot;/&gt; &lt;!--aop的配置--&gt; &lt;aop:config&gt; &lt;!--切入点 expression:表达式匹配要执行的方法--&gt; &lt;aop:pointcut id=&quot;pointcut&quot; expression=&quot;execution(* com.yun.service.UserServiceImpl.*(..))&quot;/&gt; &lt;!--执行环绕; advice-ref执行方法 . pointcut-ref切入点--&gt; &lt;aop:advisor advice-ref=&quot;log&quot; pointcut-ref=&quot;pointcut&quot;/&gt; &lt;aop:advisor advice-ref=&quot;afterLog&quot; pointcut-ref=&quot;pointcut&quot;/&gt; &lt;/aop:config&gt;&lt;/beans&gt; log.java12345678910111213import org.springframework.aop.MethodBeforeAdvice;import java.lang.reflect.Method;public class Log implements MethodBeforeAdvice &#123; //method : 要执行的目标对象的方法 //objects : 被调用的方法的参数 //Object : 目标对象 @Override public void before(Method method, Object[] objects, Object o) throws Throwable &#123; System.out.println( o.getClass().getName() + &quot;的&quot; + method.getName() + &quot;方法被执行了&quot;); &#125;&#125; afterlog.java12345678910111213141516import org.springframework.aop.AfterReturningAdvice;import java.lang.reflect.Method;public class AfterLog implements AfterReturningAdvice &#123; //returnValue 返回值 //method被调用的方法 //args 被调用的方法的对象的参数 //target 被调用的目标对象 @Override public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable &#123; System.out.println(&quot;执行了&quot; + target.getClass().getName() +&quot;的&quot;+method.getName()+&quot;方法,&quot; +&quot;返回值：&quot;+returnValue); &#125;&#125; Test.java12345678910111213141516import com.yun.service.UserService;import org.junit.Test;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;public class MyTest &#123; @Test public void test()&#123; ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;); UserService userService = (UserService) context.getBean(&quot;userService&quot;); userService.search();// userService.add();// userService.delete();// userService.update(); &#125;&#125; 方式二使用自定义接口 DiyPointcut.java12345678910package com.yun.diy;public class DiyPointcut &#123; public void before()&#123; System.out.println(&quot;---------方法执行前---------&quot;); &#125; public void after()&#123; System.out.println(&quot;---------方法执行后---------&quot;); &#125;&#125; 12345678910111213&lt;!-- 方式二--&gt; &lt;!--第二种方式自定义实现--&gt; &lt;!--注册bean--&gt; &lt;bean id=&quot;diy&quot; class=&quot;com.yun.diy.DiyPointcut&quot;/&gt; &lt;!--aop的配置--&gt; &lt;aop:config&gt; &lt;!--第二种方式：使用AOP的标签实现--&gt; &lt;aop:aspect ref=&quot;diy&quot;&gt; &lt;aop:pointcut id=&quot;diyPonitcut&quot; expression=&quot;execution(* com.yun.service.UserServiceImpl.*(..))&quot;/&gt; &lt;aop:before pointcut-ref=&quot;diyPonitcut&quot; method=&quot;before&quot;/&gt; &lt;aop:after pointcut-ref=&quot;diyPonitcut&quot; method=&quot;after&quot;/&gt; &lt;/aop:aspect&gt; &lt;/aop:config&gt; 方式三使用注解实现 AnnotationPointcut.java123456789101112131415161718192021222324252627282930package com.yun.diy;import org.aspectj.lang.ProceedingJoinPoint;import org.aspectj.lang.annotation.After;import org.aspectj.lang.annotation.Around;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Before;//标识这个类是一个切面@Aspectpublic class AnnotationPointcut &#123;//前置 @Before(&quot;execution(* com.yun.service.UserServiceImpl.*(..))&quot;) public void before()&#123; System.out.println(&quot;---------方法执行前---------&quot;); &#125;//后置 @After(&quot;execution(* com.yun.service.UserServiceImpl.*(..))&quot;) public void after()&#123; System.out.println(&quot;---------方法执行后---------&quot;); &#125;//环绕 @Around(&quot;execution(* com.yun.service.UserServiceImpl.*(..))&quot;) public void around(ProceedingJoinPoint jp) throws Throwable &#123; System.out.println(&quot;环绕前&quot;); System.out.println(&quot;签名:&quot;+jp.getSignature()); //执行目标方法proceed Object proceed = jp.proceed(); System.out.println(&quot;环绕后&quot;); System.out.println(proceed); &#125;&#125; applicationContext.xml1234&lt;!--第三种方式:注解实现--&gt;&lt;bean id=&quot;annotationPointcut&quot; class=&quot;com.yun.diy.AnnotationPointcut&quot;/&gt;&lt;!--开启注解--&gt;&lt;aop:aspectj-autoproxy/&gt; 结果 整合MyBatispom.xml1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;parent&gt; &lt;artifactId&gt;Spring-Study&lt;/artifactId&gt; &lt;groupId&gt;org.example&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;spring-day10-mybatis&lt;/artifactId&gt; &lt;dependencies&gt; &lt;!--mybatis--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.4.5&lt;/version&gt; &lt;/dependency&gt; &lt;!--Mysql驱动--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;8.0.13&lt;/version&gt; &lt;/dependency&gt; &lt;!--junit--&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.13&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;5.1.10.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;5.1.10.RELEASE&lt;/version&gt; &lt;/dependency&gt;&lt;!-- aspectJ AOP 织入器--&gt; &lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt; &lt;dependency&gt; &lt;groupId&gt;org.aspectj&lt;/groupId&gt; &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt; &lt;version&gt;1.9.4&lt;/version&gt; &lt;/dependency&gt;&lt;!-- mybatis-spring整合包 【重点--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;version&gt;2.0.2&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;true&lt;/filtering&gt; &lt;/resource&gt; &lt;resource&gt; &lt;directory&gt;src/main/java&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;true&lt;/filtering&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/build&gt;&lt;/project&gt; mybatis-config.xml1234567891011121314151617181920212223242526&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt; &lt;typeAliases&gt; &lt;package name=&quot;com.yun.pojo&quot;/&gt; &lt;/typeAliases&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306?serverTimezone=UTC&amp;amp;userSSL=false&amp;amp;useUnicode=true&amp;amp;CharacterEncoding=UTF-8&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;package name=&quot;com.yun.dao&quot;/&gt; &lt;/mappers&gt;&lt;/configuration&gt; MybatisUtils.java 123456789101112131415161718192021222324252627282930package com.yun.utils;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import java.io.IOException;import java.io.InputStream;//sqlSessionFactary--&gt;sqlsessionpublic class MybatisUtils &#123; private static SqlSessionFactory sqlSessionFactory; static&#123; try &#123; //使用mybatis第一步获取SQL session对象 String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); &#125;catch (IOException e)&#123; e.printStackTrace(); &#125; &#125; //既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。 //SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。 public static SqlSession getSqlSession()&#123; return sqlSessionFactory.openSession(); &#125;&#125;","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2021-04-01T02:39:57.633Z","updated":"2021-04-22T14:19:08.330Z","comments":true,"path":"2021/04/01/hello-world/","link":"","permalink":"http://example.com/2021/04/01/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}